//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Maze"",
            ""id"": ""feeb4091-c901-4e34-a0f5-dd1589f9fc52"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d2e650d8-541e-4dbc-899f-2be16cf806e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44f863d5-5a55-4bf5-b2c6-b3f29d576e80"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Maze
        m_Maze = asset.FindActionMap("Maze", throwIfNotFound: true);
        m_Maze_Rotate = m_Maze.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Maze
    private readonly InputActionMap m_Maze;
    private IMazeActions m_MazeActionsCallbackInterface;
    private readonly InputAction m_Maze_Rotate;
    public struct MazeActions
    {
        private @InputController m_Wrapper;
        public MazeActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Maze_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Maze; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MazeActions set) { return set.Get(); }
        public void SetCallbacks(IMazeActions instance)
        {
            if (m_Wrapper.m_MazeActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_MazeActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_MazeActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_MazeActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_MazeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public MazeActions @Maze => new MazeActions(this);
    public interface IMazeActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
}
